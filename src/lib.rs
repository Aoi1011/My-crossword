use digest::{generic_array::GenericArray, Digest};
use libsecp256k1_core::curve::{ECMultGenContext, Scalar};
pub use libsecp256k1_core::*;

use crate::curve::{Affine, ECMultContext};

#[cfg(all(feature = "static-context", not(feature = "lazy-static-context")))]
/// A static ECMult context.
/// Correct `pre_g` values are fed into 'ECMultContext::new_from_raw', generated by build script.
pub static ECMULT_CONTEXT: ECMultContext =
    unsafe { ECMultContext::new_from_raw(include!(concat!(env!("OUT_DIR"), "/const.rs"))) };

#[cfg(all(feature = "static-context", not(feature = "lazy-static-context")))]
/// A static ECMultGen context.
/// Correct 'prec' values are fed into `ECMultGenContext::new_from_raw` generated by build script.
pub static ECMULT_GEN_CONTEXT: ECMultGenContext =
    unsafe { ECMultGenContext::new_from_raw(include!(concat!(env!("OUT_DIR"), "/const_gen.rs"))) };

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
/// Public key on a secp256k1 curve.
pub struct PublicKey(Affine);

#[derive(Debug, Clone, Copy, Eq, PartialEq)]
/// Secret key (256-bit) on a secp256k1 curve.
pub struct SecretKey(Scalar);

#[derive(Debug, Clone, Copy, Eq, PartialEq)]
/// An ECDSA signature.
pub struct Signature {
    pub r: Scalar,
    pub s: Scalar,
}

#[derive(Debug, Clone, Copy, Eq, PartialEq)]
/// Tag used for public key  recovery from signature
pub struct Recoveryid(u8);

#[derive(Debug, Clone, Eq, ParitialEq)]
/// Hashed message input to an ECDSA signature.
pub struct Message(pub Scalar);

#[derive(Debug, Clone, PartialEq, Eq)]
/// Shared secret using ECDH
pub struct SharedSecret<D: Digest>(GenericArray<u8, D::OutputSize>);
